# -*- coding: utf-8 -*-
"""WordSimilarity-Thesaurus-Wordnet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eAmRRAUspJf-Is8BjAOnNQ8swUdVOE-J
"""

## https://www.nltk.org/howto/wordnet.html
from nltk.corpus import wordnet

#For more compact code
import nltk
nltk.download('wordnet')
from nltk.corpus import wordnet as wn

# Look up a word using synsets()
wn.synsets('dog')

wn.synsets('dog', pos=wn.VERB)

"""The other parts of speech are **NOUN, ADJ** and **ADV**.

A synset is identified with a 3-part name of the form: **word.pos.nn**
"""

wn.synset('dog.n.01')

print(wn.synset('dog.n.01').definition())

len(wn.synset('dog.n.01').examples())
#'dog.n.01' refers to the first noun sense (n.01) of the word "dog" in WordNet.

print(wn.synset('dog.n.01').examples()[0])
#This retrieves a list of example sentences for that particular synset (i.e., how the word is used in context).

wn.synset('dog.n.01').lemmas()
# This returns the list of all lemma names (i.e., synonyms or near-synonyms) that are part of this synset.
###Lemmas are the words used to express that concept in English

wn.langs()
### returns a list of all language codes for which WordNet has lemma translations or equivalents.

sorted(wn.langs())
## returns a list of language codes sorted in alphabetical order

nltk.download('omw-1.4')
wn.synset('spy.n.01').lemma_names('jpn')

"""# <font color="red">**Synonyms**</font>

"""

wn.synonyms('car')

"""# <font color="8D33FF">**Synsets**</font>"""

### Synset: a set of synonyms that share a common meaning.
dog = wn.synset('dog.n.01')
sorted(dog.hypernyms())
### HYPERNYMS are "IS A" relationship with the word, Eg. The dog is a kind of animal

sorted(dog.hyponyms())

sorted(dog.member_holonyms())

"""# <font color="0D1EAB">**Similarity**</font>"""

dog = wn.synset('dog.n.01')
## synset('dog.n.01') â†’ gets the first noun sense (n.01) of the word "dog" from WordNet
## The other parts of speech are v.01 - verb, r.01 - adverb and a.01 - for adjective

cat = wn.synset('cat.n.01')
dog.path_similarity(cat)
##. synset1.path_similarity(synset2):
###. path_similarity() measures how close two synsets are in the WordNet hierarchy, based on the shortest path length (number of "is-a" links) between them
####. the formula is given by " similarity = 1 / (path_length + 1)""
#####   Return a score denoting how similar two word senses are, based on the shortest path that connects the senses in the is-a (hypernym/hypnoym) taxonomy.

hit = wn.synset('hit.v.01')
slap = wn.synset('slap.v.01')

hit.path_similarity(slap)

"""# <font color="710670">Likewise there are many similarity measures in wordnet

1.   **Wu-Palmer Similarity** - synset1.wup_similarity(synset2) - Return a score denoting how similar two word senses are, based on the depth of the two senses in the taxonomy and that of their Least Common Subsumer (most specific ancestor node)
2.   **Leacock-Chodorow Similarity** - synset1.lch_similarity(synset2) where the relationship is given as -log(p/2d) where p is the shortest path length and d the taxonomy depth.

</font>
"""

hit.wup_similarity(slap)

wn.lch_similarity(hit, slap)

synsets = wn.synsets("car")
print(synsets)

car = synsets[0]
print("Name:", car.name())
print("Definition:", car.definition())
print("Examples:", car.examples())

print("Lemmas:", car.lemma_names())

print("Part Meronyms:", car.part_meronyms())
print("Member Holonyms:", car.member_holonyms())

def expand_query(query):
    words = query.lower().split()
    expanded = set(words)

    for word in words:
        for syn in wn.synsets(word):
            for lemma in syn.lemmas():
                expanded.add(lemma.name().replace('_', ' '))

    return list(expanded)

query = "car repair"
expanded_terms = expand_query(query)
print("Expanded query terms:", expanded_terms)



import networkx as nx

G = nx.Graph()
G.add_edge("bank", "money", relation="financial")
G.add_edge("bank", "river", relation="geographical")

nx.draw(G, with_labels=True)

dog.path_similarity(cat)

dog.lch_similarity(cat)

dog.wup_similarity(cat)

"""# <font color="711106">**Path Similarity**</font>"""

from nltk.corpus import wordnet as wn

# Get two synsets
synset1 = wn.synset('dog.n.01')      # domestic dog
synset2 = wn.synset('wolf.n.01')     # wild wolf

# Compute path-based similarity
similarity = synset1.path_similarity(synset2)
print(f"Path similarity: {similarity}")