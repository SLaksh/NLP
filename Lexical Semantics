# -*- coding: utf-8 -*-
"""Lexical Semantics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KgwCvtkZIPY9p0tsGtD4YeeU1BF5uWXS
"""

import nltk
nltk.download('wordnet')

# Finding hypernyms
syn = wordnet.synsets('apple')[0]
# In wordnet, Synonyms (synsets) are the words that denote the same concept and are interchangeable in many contexts so that they are grouped into unordered sets.
#  We use the synsets() function to find the synset (a set of synonyms) for the word "apple" and "fruit".
hypernyms = syn.hypernyms()
print("Hypernyms of 'apple': ", hypernyms)

# Finding hyponyms
syn = wordnet.synsets('fruit')[0]
hyponyms = syn.hyponyms()
print("Hyponyms of 'fruit': ", hyponyms)

synonyms = []

for syn in wordnet.synsets("Soil"):
    for lm in syn.lemmas():
             synonyms.append(lm.name())
# We can use lemmas() function of the synset. It returns synonyms and antonyms of that particular synset
print (set(synonyms))

import nltk
nltk.download('wordnet')
from nltk.corpus import wordnet

word1 = "cat"
word2 = "dog"

synsets1 = wordnet.synsets(word1)
synsets2 = wordnet.synsets(word2)

# This is a simplified example, you'd likely want more sophisticated logic
# for finding the most relevant synsets for your use case.
# For instance, you might want to consider the most frequent or relevant synsets,
# and then compare them using the WuPalmer similarity function (see below).

# Calculate WuPalmer similarity (requires more comprehensive handling of synsets)
from nltk.metrics import wup_similarity
wu_similarity_score = wup_similarity(synsets1[0], synsets2[0]) # Example, needs handling of multiple synsets
print("WuPalmer similarity: {wu_similarity_score}")

antonyms = []

for syn in wordnet.synsets("ahead"):
    for lm in syn.lemmas():
        if lm.antonyms():
            antonyms.append(lm.antonyms()[0].name())

print(set(antonyms))
