# -*- coding: utf-8 -*-
"""SentimentAnalysis -MovieDataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HiToN0PRevdITV1iPx5ex-sQcKlvHIt8
"""

# -*- coding: utf-8 -*-
"""SentimentAnalysis-MovieReviewsDataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X-GtLN7mvbH57ceaSZxROHd5slFzRZIS
"""

import nltk
from nltk.corpus import movie_reviews
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
nltk.download('punkt_tab')


# Download necessary NLTK resources
nltk.download('movie_reviews')
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')
# Load movie reviews dataset
reviews = [(movie_reviews.raw(fileid), category)
           for category in movie_reviews.categories()
           for fileid in movie_reviews.fileids(category)]
# Preprocess the reviews
lemmatizer = WordNetLemmatizer()
stop_words = set(stopwords.words('english'))
def preprocess_text(review):
    tokens = word_tokenize(review.lower())
    tokens = [lemmatizer.lemmatize(token) for token in tokens if token.isalpha()]
    tokens = [token for token in tokens if token not in stop_words]
    return ' '.join(tokens)
X = [preprocess_text(review) for review, _ in reviews]
y = [category for _, category in reviews]
# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Create TF-IDF vectors
vectorizer = TfidfVectorizer()
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)
# Train an SVM classifier
classifier = SVC()
classifier.fit(X_train_tfidf, y_train)
# Make predictions on the test set
y_pred = classifier.predict(X_test_tfidf)
# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")