# -*- coding: utf-8 -*-
"""CRF-PoS Tagging.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A6Wxylo5reOsWSOgppjUJlbnFhWSJyNw
"""

pip install sklearn-crfsuite

import nltk
import nltk
import sklearn_crfsuite
from sklearn_crfsuite import metrics
from sklearn_crfsuite import scorers
import matplotlib.pyplot as plt


# Sample data
nltk.download('treebank')
nltk.download('universal_tagset')
from nltk.corpus import treebank

# Prepare the data
nltk_data = treebank.tagged_sents(tagset='universal')
nltk_data = nltk_data[:300]  # Using a small subset for this example

# Feature extraction functions
def word2features(sent, i):
    word = sent[i][0]
    features = {
        'word': word,
        'is_first': i == 0,
        'is_last': i == len(sent) - 1,
    }
    return features

def sent2features(sent):
    return [word2features(sent, i) for i in range(len(sent))]

def sent2labels(sent):
    return [label for word, label in sent]

def sent2tokens(sent):
    return [word for word, label in sent]

# Split data into train and test sets
cutoff = int(0.8 * len(nltk_data))
train_data = nltk_data[:cutoff]
test_data = nltk_data[cutoff:]

X_train = [sent2features(sent) for sent in train_data]
y_train = [sent2labels(sent) for sent in train_data]

X_test = [sent2features(sent) for sent in test_data]
y_test = [sent2labels(sent) for sent in test_data]

# Train the CRF model
crf = sklearn_crfsuite.CRF(
    algorithm='lbfgs',
    c1=0.1,
    c2=0.1,
    max_iterations=100,
    all_possible_transitions=True
)
crf.fit(X_train, y_train)

# Test the model
y_pred = crf.predict(X_test)

# Evaluate the model
print("F1 Score: {:.2f}%".format(metrics.flat_f1_score(y_test, y_pred, average='weighted') * 100))
print("Precision: {:.2f}%".format(metrics.flat_precision_score(y_test, y_pred, average='weighted') * 100))
print("Recall: {:.2f}%".format(metrics.flat_recall_score(y_test, y_pred, average='weighted') * 100))

# Plot the learning curves (optional)
c1_values = [0.01, 0.1, 1, 10]
f1_scores = []

for c1_value in c1_values:
    crf = sklearn_crfsuite.CRF(
        algorithm='lbfgs',
        c1=c1_value,
        c2=0.1,
        max_iterations=100,
        all_possible_transitions=True
    )
    crf.fit(X_train, y_train)
    y_pred = crf.predict(X_test)
    f1 = metrics.flat_f1_score(y_test, y_pred, average='weighted')
    f1_scores.append(f1)

print(X_test)
print(y_pred)

plt.plot(c1_values, f1_scores)
plt.xlabel('C1 value')
plt.ylabel('F1 Score')
plt.title('F1 Score vs. C1 value')
plt.show()